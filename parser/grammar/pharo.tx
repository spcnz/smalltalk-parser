import syntax_elements

Program:
     temps=Temps? statements*=Statement['.'] PERIOD?
    ;

Temps :
     PIPE (vars=ID)+ PIPE
   ;
Statement :
      ReturnStatement
    | Assignment
    | Expression
;
ReturnStatement:
    '^' (return=Assignment | return=Expression)
;

Expression:
    Cascade
    |  KeywordSend
    |  BinarySend
    |  UnarySend
    | Literal
;

Assignment :
    var = ID ':=' value = Expression
;

Cascade:
    (receiver= KeywordSend | receiver= BinarySend | receiver=UnarySend) (';' selectors=Message)+
;

Message:
    KeywordMessage
    | BinaryMessage
    | UnaryMessage
;

BinarySend:
    (receiver=UnarySend | receiver=Receiver)    tail=BinaryTail
;

UnarySend:
    receiver=Receiver selector=UnaryTail
;

KeywordSend:
   (receiver=BinarySend | receiver=UnarySend | receiver=Receiver)  msg=KeywordMessage
;

UnaryTail:
    msg=UnaryMessage  tail=UnaryTail?
;

UnaryMessage:
       !KEYWORD selector=ID
;

BinaryTail : msg=BinaryMessage tail=BinaryTail?;

BinaryMessage:
       selector=BINARY_SELECTOR    (arg=UnarySend | arg=Literal)
;

KeywordMessage :
      keyword=KeywordPair+
;

KeywordPair : key=KEYWORD   (arg=  BinarySend | arg=UnarySend | arg= Literal )   ;


Receiver:
    Subexpression
	|	!KEYWORD ID
	|	Literal
;

Subexpression :
    '('    Expression    ')'
;


Literal :
    RuntimeLiteral | ParsetimeLiteral
;

RuntimeLiteral:
    type=Block | '{' type=DynamicArray '}'
;
Block : BLOCK_START (params=BlockParamList PIPE)?    body=Program? BLOCK_END;

BlockParamList : params=BLOCK_PARAM +;


DynamicArray:
    exp+=Expression['.']
;
