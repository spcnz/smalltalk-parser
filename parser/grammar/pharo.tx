Program:
    ws? temps=Temps? ws? statements *= Statement
    ;

Temps :
     PIPE (ws? vars=IDENTIFIER)+ ws? PIPE
   ;
Statement :
    ReturnStatement ws?
    | Expressions ws? PERIOD ws? ReturnStatement
    | Expressions PERIOD? ws?
;
ReturnStatement:
    '^' ws? return = Expression ws? PERIOD?
;
Expressions:
    exp=Expression (ws? PERIOD ws? list=Expression)*
;

Expression:
      assignment=Assignment
    | cascade=Cascade
    | send=KeywordSend
    | send=BinarySend
    | send=UnarySend
    | literal = Literal
;

Assignment :
    var = IDENTIFIER ws? ':=' ws? value = Expression
;

Cascade:
    (receiver=KeywordSend | receiver=BinarySend | receiver=UnarySend) (ws? ';' ws? selectors=Message)+
;

Message:
    KeywordMessage
    | BinaryMessage
    | UnaryMessage

;

BinarySend:
    (receiver=UnarySend | receiver=Receiver) ws? tail=BinaryTail
;

UnarySend:
    receiver=Receiver ws? selector=UnaryTail
;

KeywordSend:
    (receiver=Receiver | receiver=UnarySend)  msg=KeywordMessage
;

UnaryTail:
    msg=UnaryMessage ws? tail=UnaryTail? ws?
;

UnaryMessage:
    ws? unarySelector=IDENTIFIER
;

BinaryTail : msg=BinaryMessage tail=BinaryTail?;

BinaryMessage:
    ws? selector=BINARY_SELECTOR ws? (arg=UnarySend | arg=Literal)
;

KeywordMessage :
   ws? (keyword=KeywordPair ws?)+
;

KeywordPair : key=KEYWORD ws? (arg=BinarySend | arg= Literal) ws?;


Receiver:
    Subexpression
	|	IDENTIFIER
	|	Literal
;

Subexpression :
    '(' ws? Expression ws? ')'
;

CommentPharo:
   /"(.|[\r\n])*?"/
;

Literal :
    	NUMBER
	|	STRING
	|   NIL
    |   SELF
    |   BOOL
    |   SUPER
;

ws : (SEPARATOR | CommentPharo)+;

SELF   : 'self' ;
SUPER  : 'super' ;
NIL    : 'nil' ;
PERIOD : '.';
SEPARATOR : /[ \t\r\n]/;
PIPE : '|' ;
IDENTIFIER : /[a-zA-Z]+[a-zA-Z0-9_]*/;
KEYWORD : IDENTIFIER ':';

BINARY_SELECTOR :
     '+'
    | '*' 
    | '//' 
    | '=' 
    | '>' 
    | '<' 
    | ',' 
    | '@' 
    | '%' 
    | '~' 
    | PIPE 
    | '&' 
    | '-'
    | '/'
    | '\\'
    ;

